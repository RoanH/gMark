plugins{
	id 'java'
	id 'java-library'
	id 'application'
	id 'eclipse'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'jacoco'
	id 'maven-publish'
	id 'signing'
	id 'edu.sc.seis.launch4j' version '2.5.1'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

sourceSets{
	main{
		java{
			srcDirs 'src'
		}
		resources{
			srcDirs 'src'
		}
	}
	client{
		java{
			srcDirs = ['src', 'client']
		}
		resources{
			srcDirs = ['src', 'client']
		}
	}
	test{
		java{
			srcDir 'test'
		}
		resources{
			srcDir 'test'
		}
	}
}

test{
	useJUnitPlatform()
	dependsOn 'cleanTest'
	
	testLogging{
		events "passed", "skipped", "failed"
	}
}

task clientJar(type: ShadowJar, group: "build"){
	from sourceSets.client.output
	configurations = [project.configurations.clientImplementation]
	manifest{
		attributes 'Main-Class': 'dev.roanh.gmark.client.GraphMark'
	}
}

task cliJar(type: ShadowJar, group: "build"){
	appendix = "cli"
	from sourceSets.main.output
	configurations = [project.configurations.implementation]
	manifest{
		attributes 'Main-Class': 'dev.roanh.gmark.Main'
	}
}

//work around for: https://github.com/johnrengelman/shadow/issues/651
components.java.withVariantsFromConfiguration(project.configurations.shadowRuntimeElements){
	skip()
}

javadoc{
	options.memberLevel = JavadocMemberLevel.PRIVATE
}

eclipse.classpath.downloadJavadoc = true
compileJava.options.encoding = 'UTF-8'
compileClientJava.options.encoding = 'UTF-8'
sourceCompatibility = 1.8
version = 'v1.0'//Main.java
shadowJar.archiveName = 'gMark-v' + project.version + '.jar'

repositories{
	//Local cache
	if(project.hasProperty("nexusPublic")){
		maven{
			allowInsecureProtocol = true
			url "$nexusPublic"
		}
	}
	mavenCentral();
}

dependencies{
	clientImplementation 'dev.roanh.util:util:2.1'
	implementation 'commons-cli:commons-cli:1.5.0'
	testImplementation(platform('org.junit:junit-bom:5.8.1'))
	testImplementation('org.junit.jupiter:junit-jupiter')
}

configurations.clientImplementation.extendsFrom(configurations.implementation)
configurations.implementation.setCanBeResolved(true)
configurations.clientImplementation.setCanBeResolved(true)

application{
	mainClassName = 'dev.roanh.gmark.Main'
}

group = 'dev.roanh.gmark'
version = System.getenv("VERSION") ? System.getenv("VERSION").substring(1) : 'SNAPSHOT'

publishing{
	publications{
		mavenJava(MavenPublication){
			artifactId = 'gmark'
			from components.java
		
			pom{
				name = 'gMark'
				description = 'A domain- and query language-independent graph instance and query workload generator.'
				url = 'https://github.com/RoanH/gMark'
				licenses{
					license{
						name = 'GNU General Public License v3.0'
						url = 'http://www.gnu.org/licenses/gpl-3.0.txt'
					}
				}
				developers{
					developer{
						id = 'RoanH'
						name = 'Roan Hofland'
						email = 'roan@roanh.dev'
					}
				}
				scm{
					connection = 'scm:git:git@github.com:RoanH/gMark.git'
					developerConnection = 'scm:git:git@git.roanh.dev:roan/gmark.git'
					url = 'https://github.com/RoanH/gMark'
				}
			}
		}
	}
	
	repositories{
		maven{
			url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
			credentials{
				username findProperty("OSSRH_USER")
				password findProperty("OSSRH_PASS")
			}
		}
	}
	
	jar{
		into("META-INF/maven/$project.group/$project.publishing.publications.mavenJava.artifactId"){
			from{
				generatePomFileForMavenJavaPublication
			}
			rename ".*", "pom.xml"
		}
	}
}

signing{
	useInMemoryPgpKeys(findProperty("signingKeyId"), findProperty("signingKey"), findProperty("signingPassword"))
	sign publishing.publications.mavenJava
}

launch4j{
	jarTask = project.tasks.clientJar
	mainClassName = 'dev.roanh.gmark.client.GraphMark'
	//icon = "${projectDir}/icon.ico"
	jreMinVersion = project.sourceCompatibility
	bundledJrePath = "%JAVA_HOME%"
	outfile = project.name + '-v' + project.version + '.exe'
	fileDescription = project.name
	version = project.version
	textVersion = project.version
	copyright = "Roan Hofland"
	headerType = "console"
	stayAlive = true
}