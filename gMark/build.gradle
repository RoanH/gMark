plugins{
	id 'java-library'
	id 'maven-publish'
	id 'signing'
	id 'com.github.spotbugs' version '5.0.14'
	id 'org.sonarqube' version '4.4.1.3373'
	id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
	id 'edu.sc.seis.launch4j' version '2.5.1' apply false
}

allprojects{
	apply plugin: 'eclipse'
	apply plugin: 'com.github.spotbugs'

	version = findProperty("refName") ?: 'SNAPSHOT'
	if(version.matches("v\\d+\\.\\d+")){
		version = version.substring(1)
	}

	eclipse.classpath.downloadSources = true
	eclipse.classpath.downloadJavadoc = true
	compileJava.options.encoding = 'UTF-8'
	sourceCompatibility = 1.17
	javadoc.options.memberLevel = JavadocMemberLevel.PRIVATE

	repositories{
		//Local cache
		if(project.hasProperty("nexusPublic")){
			maven{
				allowInsecureProtocol = true
				url "$nexusPublic"
			}
		}
		mavenCentral()
	}

	dependencies{
		testImplementation(platform('org.junit:junit-bom:5.10.0'))
		testImplementation('org.junit.jupiter:junit-jupiter')
	}

	test{
		useJUnitPlatform()
		dependsOn 'cleanTest'

		testLogging{
			events "passed", "skipped", "failed"
		}
	}
}

sourceSets{
	main.java.srcDirs = ['src']

	test{
		java.srcDirs = ['test']
		resources.srcDirs = ['test']
	}
}

dependencies{
	clientImplementation 'dev.roanh.util:util:2.2'
	implementation 'commons-cli:commons-cli:1.5.0'
	testImplementation(platform('org.junit:junit-bom:5.8.1'))
	testImplementation('org.junit.jupiter:junit-jupiter')
}

group = 'dev.roanh.gmark'
ext.artifact = 'gmark'

subprojects{
	apply plugin: 'java'
	apply plugin: 'application'
	apply plugin: 'com.github.johnrengelman.shadow'
}

project(':cli'){
	sourceSets{
		main.java.srcDirs = ['src']
	}

	eclipse.project.name = 'gMark-CLI'
	shadowJar.archiveName = 'gMark-v' + version + '.jar'
	application.mainClassName = 'dev.roanh.gmark.Main'

	shadowJar{
		mergeServiceFiles()
	}
}

project(':client'){
	apply plugin: 'edu.sc.seis.launch4j'

	sourceSets{
		main{
			java.srcDirs = ['src']
			resources.srcDirs = ['resources']
		}
	}

	eclipse.project.name = 'gMark-Client'
	shadowJar.archiveName = 'gMark-v' + version + '.jar'
	application.mainClassName = 'dev.roanh.gmark.client.GraphMark'

	shadowJar{
		mergeServiceFiles()
	}

	launch4j{
		jarTask = project.tasks.shadowJar
		mainClassName = application.mainClassName
		jreMinVersion = project.sourceCompatibility
		bundledJrePath = "%JAVA_HOME%"
		outfile = 'gMark-v' + project.version + '.exe'
		fileDescription = "gMark-Client"
		productName = rootProject.name
		version = project.version
		textVersion = project.version
		copyright = "Roan Hofland"
	}
}

java{
	withSourcesJar()
	withJavadocJar()
}

publishing{
	publications{
		mavenJava(MavenPublication){
			from components.java
			artifactId = project.artifact

			pom{
				name = project.eclipse.project.name
				description = 'A domain- and query language-independent graph instance and query workload generator.'
				url = 'https://github.com/RoanH/gMark'
				licenses{
					license{
						name = 'GNU General Public License v3.0'
						url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
					}
				}
				developers{
					developer{
						id = 'RoanH'
						name = 'Roan Hofland'
						email = 'roan@roanh.dev'
					}
				}
				scm{
					connection = 'scm:git:git@github.com:RoanH/gMark.git'
					developerConnection = 'scm:git:git@git.roanh.dev:roan/gmark.git'
					url = 'https://github.com/RoanH/gMark'
				}
			}
		}
	}

	repositories{
		maven{
			url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
			credentials{
				username findProperty("OSSRH_USER")
				password findProperty("OSSRH_PASS")
			}
		}
	}
}

jar{
	into("META-INF/maven/$project.group/$project.artifact"){
		from{
			generatePomFileForMavenJavaPublication
		}
		rename ".*", "pom.xml"
	}
}

signing{
	useInMemoryPgpKeys(findProperty("signingKeyId"), findProperty("signingKey"), findProperty("signingPassword"))
	sign publishing.publications.mavenJava
}

sonar{
	properties{
		property "sonar.projectKey", "roan_gmark_b2f3751b-4cd8-4394-831c-217ae555bac9"
		property "sonar.projectName", "gMark"
	}
}

task spotbugsAll(type: com.github.spotbugs.snom.SpotBugsTask, group: "verification"){
	description = 'Generates the combined spotbugs report for all sub-projects.'

	sourceDirs = files(allprojects.collect{
		project->project.sourceSets.main.allSource.srcDirs
	})

	classDirs = files(allprojects.collect{
		project->project.sourceSets.main.output
	})

	auxClassPaths = files(allprojects.collect{
		project->project.sourceSets.main.compileClasspath
	})
}

allprojects{
	spotbugs{
		showProgress = true
		effort = 'max'
		reportLevel = 'low'
		excludeFilter = file("$rootDir/exclude.xml")
	}

	tasks.withType(com.github.spotbugs.snom.SpotBugsTask){
		reports{
			html{
				required = true
				outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
				stylesheet = 'fancy-hist.xsl'
			}
		}
	}
}

task javadocAll(type: Javadoc, group: "documentation"){
	description = 'Generates the combined javadoc for all sub-projects.'

	source allprojects.collect{
		project->project.sourceSets.main.allJava
	}

	classpath = files(allprojects.collect{
		project->project.sourceSets.main.compileClasspath
	})

	options.memberLevel = JavadocMemberLevel.PRIVATE
	destinationDir = new File(buildDir, 'javadoc')
}
