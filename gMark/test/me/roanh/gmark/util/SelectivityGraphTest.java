package me.roanh.gmark.util;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import static dev.roanh.gmark.util.SelectivityType.of;
import static dev.roanh.gmark.core.SelectivityClass.*;

import org.junit.jupiter.api.Test;

import dev.roanh.gmark.ConfigParser;
import dev.roanh.gmark.core.SelectivityClass;
import dev.roanh.gmark.core.graph.Schema;
import dev.roanh.gmark.core.graph.Type;
import dev.roanh.gmark.util.Graph.GraphEdge;
import dev.roanh.gmark.util.SelectivityGraph;
import dev.roanh.gmark.util.SelectivityType;

public class SelectivityGraphTest{
	private Schema schema = ConfigParser.parse(ClassLoader.getSystemResourceAsStream("test.xml")).getSchema();
	private SelectivityGraph gs = new SelectivityGraph(schema, 4);

	@Test
	public void fullCheck(){
		//types
		Type t0 = schema.getTypes().get(0);
		Type t1 = schema.getTypes().get(1);
		Type t2 = schema.getTypes().get(2);
		Type t3 = schema.getTypes().get(3);
		Type t4 = schema.getTypes().get(4);
		
		//edges that should exists
		assertTrue(find(of(t0, ONE_ONE), LESS_GREATER, of(t0, ONE_N)));
		assertTrue(find(of(t0, ONE_ONE), CROSS, of(t0, ONE_N)));
		assertTrue(find(of(t0, N_ONE), LESS_GREATER, of(t0, N_ONE)));
		assertTrue(find(of(t0, N_ONE), CROSS, of(t0, N_ONE)));
		assertTrue(find(of(t0, ONE_N), LESS_GREATER, of(t0, ONE_N)));
		assertTrue(find(of(t0, ONE_N), CROSS, of(t0, ONE_N)));
		assertTrue(find(of(t0, EQUALS), LESS_GREATER, of(t0, LESS_GREATER)));
		assertTrue(find(of(t0, EQUALS), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t0, LESS), LESS_GREATER, of(t0, LESS_GREATER)));
		assertTrue(find(of(t0, LESS), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t0, GREATER), LESS_GREATER, of(t0, CROSS)));
		assertTrue(find(of(t0, GREATER), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t0, LESS_GREATER), LESS_GREATER, of(t0, CROSS)));
		assertTrue(find(of(t0, LESS_GREATER), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t0, CROSS), LESS_GREATER, of(t0, CROSS)));
		assertTrue(find(of(t0, CROSS), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t0, ONE_ONE), LESS, of(t1, ONE_N)));
		assertTrue(find(of(t0, ONE_ONE), CROSS, of(t1, ONE_N)));
		assertTrue(find(of(t0, N_ONE), LESS, of(t1, N_ONE)));
		assertTrue(find(of(t0, N_ONE), CROSS, of(t1, N_ONE)));
		assertTrue(find(of(t0, ONE_N), LESS, of(t1, ONE_N)));
		assertTrue(find(of(t0, ONE_N), CROSS, of(t1, ONE_N)));
		assertTrue(find(of(t0, EQUALS), LESS, of(t1, LESS)));
		assertTrue(find(of(t0, EQUALS), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t0, LESS), LESS, of(t1, LESS)));
		assertTrue(find(of(t0, LESS), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t0, GREATER), LESS, of(t1, CROSS)));
		assertTrue(find(of(t0, GREATER), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t0, LESS_GREATER), LESS, of(t1, CROSS)));
		assertTrue(find(of(t0, LESS_GREATER), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t0, CROSS), LESS, of(t1, CROSS)));
		assertTrue(find(of(t0, CROSS), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t0, ONE_ONE), LESS_GREATER, of(t2, ONE_N)));
		assertTrue(find(of(t0, ONE_ONE), CROSS, of(t2, ONE_N)));
		assertTrue(find(of(t0, N_ONE), LESS_GREATER, of(t2, N_ONE)));
		assertTrue(find(of(t0, N_ONE), CROSS, of(t2, N_ONE)));
		assertTrue(find(of(t0, ONE_N), LESS_GREATER, of(t2, ONE_N)));
		assertTrue(find(of(t0, ONE_N), CROSS, of(t2, ONE_N)));
		assertTrue(find(of(t0, EQUALS), LESS_GREATER, of(t2, LESS_GREATER)));
		assertTrue(find(of(t0, EQUALS), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t0, LESS), LESS_GREATER, of(t2, LESS_GREATER)));
		assertTrue(find(of(t0, LESS), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t0, GREATER), LESS_GREATER, of(t2, CROSS)));
		assertTrue(find(of(t0, GREATER), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t0, LESS_GREATER), LESS_GREATER, of(t2, CROSS)));
		assertTrue(find(of(t0, LESS_GREATER), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t0, CROSS), LESS_GREATER, of(t2, CROSS)));
		assertTrue(find(of(t0, CROSS), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t0, ONE_ONE), LESS, of(t3, ONE_N)));
		assertTrue(find(of(t0, ONE_ONE), CROSS, of(t3, ONE_N)));
		assertTrue(find(of(t0, N_ONE), LESS, of(t3, N_ONE)));
		assertTrue(find(of(t0, N_ONE), CROSS, of(t3, N_ONE)));
		assertTrue(find(of(t0, ONE_N), LESS, of(t3, ONE_N)));
		assertTrue(find(of(t0, ONE_N), CROSS, of(t3, ONE_N)));
		assertTrue(find(of(t0, EQUALS), LESS, of(t3, LESS)));
		assertTrue(find(of(t0, EQUALS), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t0, LESS), LESS, of(t3, LESS)));
		assertTrue(find(of(t0, LESS), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t0, GREATER), LESS, of(t3, CROSS)));
		assertTrue(find(of(t0, GREATER), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t0, LESS_GREATER), LESS, of(t3, CROSS)));
		assertTrue(find(of(t0, LESS_GREATER), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t0, CROSS), LESS, of(t3, CROSS)));
		assertTrue(find(of(t0, CROSS), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t0, ONE_ONE), N_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t0, N_ONE), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t0, ONE_N), N_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t0, EQUALS), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t0, LESS), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t0, GREATER), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t0, LESS_GREATER), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t0, CROSS), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t1, ONE_ONE), GREATER, of(t0, ONE_N)));
		assertTrue(find(of(t1, ONE_ONE), CROSS, of(t0, ONE_N)));
		assertTrue(find(of(t1, N_ONE), GREATER, of(t0, N_ONE)));
		assertTrue(find(of(t1, N_ONE), CROSS, of(t0, N_ONE)));
		assertTrue(find(of(t1, ONE_N), GREATER, of(t0, ONE_N)));
		assertTrue(find(of(t1, ONE_N), CROSS, of(t0, ONE_N)));
		assertTrue(find(of(t1, EQUALS), GREATER, of(t0, GREATER)));
		assertTrue(find(of(t1, EQUALS), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t1, LESS), GREATER, of(t0, LESS_GREATER)));
		assertTrue(find(of(t1, LESS), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t1, GREATER), GREATER, of(t0, GREATER)));
		assertTrue(find(of(t1, GREATER), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t1, LESS_GREATER), GREATER, of(t0, LESS_GREATER)));
		assertTrue(find(of(t1, LESS_GREATER), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t1, CROSS), GREATER, of(t0, CROSS)));
		assertTrue(find(of(t1, CROSS), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t1, ONE_ONE), EQUALS, of(t1, ONE_N)));
		assertTrue(find(of(t1, ONE_ONE), CROSS, of(t1, ONE_N)));
		assertTrue(find(of(t1, N_ONE), EQUALS, of(t1, N_ONE)));
		assertTrue(find(of(t1, N_ONE), CROSS, of(t1, N_ONE)));
		assertTrue(find(of(t1, ONE_N), EQUALS, of(t1, ONE_N)));
		assertTrue(find(of(t1, ONE_N), CROSS, of(t1, ONE_N)));
		assertTrue(find(of(t1, EQUALS), EQUALS, of(t1, EQUALS)));
		assertTrue(find(of(t1, EQUALS), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t1, LESS), EQUALS, of(t1, LESS)));
		assertTrue(find(of(t1, LESS), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t1, GREATER), EQUALS, of(t1, GREATER)));
		assertTrue(find(of(t1, GREATER), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t1, LESS_GREATER), EQUALS, of(t1, LESS_GREATER)));
		assertTrue(find(of(t1, LESS_GREATER), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t1, CROSS), EQUALS, of(t1, CROSS)));
		assertTrue(find(of(t1, CROSS), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t1, ONE_ONE), GREATER, of(t2, ONE_N)));
		assertTrue(find(of(t1, ONE_ONE), CROSS, of(t2, ONE_N)));
		assertTrue(find(of(t1, N_ONE), GREATER, of(t2, N_ONE)));
		assertTrue(find(of(t1, N_ONE), CROSS, of(t2, N_ONE)));
		assertTrue(find(of(t1, ONE_N), GREATER, of(t2, ONE_N)));
		assertTrue(find(of(t1, ONE_N), CROSS, of(t2, ONE_N)));
		assertTrue(find(of(t1, EQUALS), GREATER, of(t2, GREATER)));
		assertTrue(find(of(t1, EQUALS), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t1, LESS), GREATER, of(t2, LESS_GREATER)));
		assertTrue(find(of(t1, LESS), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t1, GREATER), GREATER, of(t2, GREATER)));
		assertTrue(find(of(t1, GREATER), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t1, LESS_GREATER), GREATER, of(t2, LESS_GREATER)));
		assertTrue(find(of(t1, LESS_GREATER), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t1, CROSS), GREATER, of(t2, CROSS)));
		assertTrue(find(of(t1, CROSS), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t1, ONE_ONE), EQUALS, of(t3, ONE_N)));
		assertTrue(find(of(t1, ONE_ONE), CROSS, of(t3, ONE_N)));
		assertTrue(find(of(t1, N_ONE), EQUALS, of(t3, N_ONE)));
		assertTrue(find(of(t1, N_ONE), CROSS, of(t3, N_ONE)));
		assertTrue(find(of(t1, ONE_N), EQUALS, of(t3, ONE_N)));
		assertTrue(find(of(t1, ONE_N), CROSS, of(t3, ONE_N)));
		assertTrue(find(of(t1, EQUALS), EQUALS, of(t3, EQUALS)));
		assertTrue(find(of(t1, EQUALS), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t1, LESS), EQUALS, of(t3, LESS)));
		assertTrue(find(of(t1, LESS), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t1, GREATER), EQUALS, of(t3, GREATER)));
		assertTrue(find(of(t1, GREATER), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t1, LESS_GREATER), EQUALS, of(t3, LESS_GREATER)));
		assertTrue(find(of(t1, LESS_GREATER), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t1, CROSS), EQUALS, of(t3, CROSS)));
		assertTrue(find(of(t1, CROSS), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t1, ONE_ONE), N_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t1, N_ONE), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t1, ONE_N), N_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t1, EQUALS), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t1, LESS), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t1, GREATER), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t1, LESS_GREATER), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t1, CROSS), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t2, ONE_ONE), LESS_GREATER, of(t0, ONE_N)));
		assertTrue(find(of(t2, ONE_ONE), CROSS, of(t0, ONE_N)));
		assertTrue(find(of(t2, N_ONE), LESS_GREATER, of(t0, N_ONE)));
		assertTrue(find(of(t2, N_ONE), CROSS, of(t0, N_ONE)));
		assertTrue(find(of(t2, ONE_N), LESS_GREATER, of(t0, ONE_N)));
		assertTrue(find(of(t2, ONE_N), CROSS, of(t0, ONE_N)));
		assertTrue(find(of(t2, EQUALS), LESS_GREATER, of(t0, LESS_GREATER)));
		assertTrue(find(of(t2, EQUALS), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t2, LESS), LESS_GREATER, of(t0, LESS_GREATER)));
		assertTrue(find(of(t2, LESS), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t2, GREATER), LESS_GREATER, of(t0, CROSS)));
		assertTrue(find(of(t2, GREATER), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t2, LESS_GREATER), LESS_GREATER, of(t0, CROSS)));
		assertTrue(find(of(t2, LESS_GREATER), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t2, CROSS), LESS_GREATER, of(t0, CROSS)));
		assertTrue(find(of(t2, CROSS), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t2, ONE_ONE), LESS, of(t1, ONE_N)));
		assertTrue(find(of(t2, ONE_ONE), CROSS, of(t1, ONE_N)));
		assertTrue(find(of(t2, N_ONE), LESS, of(t1, N_ONE)));
		assertTrue(find(of(t2, N_ONE), CROSS, of(t1, N_ONE)));
		assertTrue(find(of(t2, ONE_N), LESS, of(t1, ONE_N)));
		assertTrue(find(of(t2, ONE_N), CROSS, of(t1, ONE_N)));
		assertTrue(find(of(t2, EQUALS), LESS, of(t1, LESS)));
		assertTrue(find(of(t2, EQUALS), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t2, LESS), LESS, of(t1, LESS)));
		assertTrue(find(of(t2, LESS), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t2, GREATER), LESS, of(t1, CROSS)));
		assertTrue(find(of(t2, GREATER), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t2, LESS_GREATER), LESS, of(t1, CROSS)));
		assertTrue(find(of(t2, LESS_GREATER), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t2, CROSS), LESS, of(t1, CROSS)));
		assertTrue(find(of(t2, CROSS), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t2, ONE_ONE), LESS_GREATER, of(t2, ONE_N)));
		assertTrue(find(of(t2, ONE_ONE), CROSS, of(t2, ONE_N)));
		assertTrue(find(of(t2, N_ONE), LESS_GREATER, of(t2, N_ONE)));
		assertTrue(find(of(t2, N_ONE), CROSS, of(t2, N_ONE)));
		assertTrue(find(of(t2, ONE_N), LESS_GREATER, of(t2, ONE_N)));
		assertTrue(find(of(t2, ONE_N), CROSS, of(t2, ONE_N)));
		assertTrue(find(of(t2, EQUALS), LESS_GREATER, of(t2, LESS_GREATER)));
		assertTrue(find(of(t2, EQUALS), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t2, LESS), LESS_GREATER, of(t2, LESS_GREATER)));
		assertTrue(find(of(t2, LESS), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t2, GREATER), LESS_GREATER, of(t2, CROSS)));
		assertTrue(find(of(t2, GREATER), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t2, LESS_GREATER), LESS_GREATER, of(t2, CROSS)));
		assertTrue(find(of(t2, LESS_GREATER), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t2, CROSS), LESS_GREATER, of(t2, CROSS)));
		assertTrue(find(of(t2, CROSS), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t2, ONE_ONE), LESS, of(t3, ONE_N)));
		assertTrue(find(of(t2, ONE_ONE), CROSS, of(t3, ONE_N)));
		assertTrue(find(of(t2, N_ONE), LESS, of(t3, N_ONE)));
		assertTrue(find(of(t2, N_ONE), CROSS, of(t3, N_ONE)));
		assertTrue(find(of(t2, ONE_N), LESS, of(t3, ONE_N)));
		assertTrue(find(of(t2, ONE_N), CROSS, of(t3, ONE_N)));
		assertTrue(find(of(t2, EQUALS), LESS, of(t3, LESS)));
		assertTrue(find(of(t2, EQUALS), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t2, LESS), LESS, of(t3, LESS)));
		assertTrue(find(of(t2, LESS), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t2, GREATER), LESS, of(t3, CROSS)));
		assertTrue(find(of(t2, GREATER), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t2, LESS_GREATER), LESS, of(t3, CROSS)));
		assertTrue(find(of(t2, LESS_GREATER), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t2, CROSS), LESS, of(t3, CROSS)));
		assertTrue(find(of(t2, CROSS), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t2, ONE_ONE), N_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t2, N_ONE), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t2, ONE_N), N_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t2, EQUALS), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t2, LESS), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t2, GREATER), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t2, LESS_GREATER), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t2, CROSS), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t3, ONE_ONE), GREATER, of(t0, ONE_N)));
		assertTrue(find(of(t3, ONE_ONE), CROSS, of(t0, ONE_N)));
		assertTrue(find(of(t3, N_ONE), GREATER, of(t0, N_ONE)));
		assertTrue(find(of(t3, N_ONE), CROSS, of(t0, N_ONE)));
		assertTrue(find(of(t3, ONE_N), GREATER, of(t0, ONE_N)));
		assertTrue(find(of(t3, ONE_N), CROSS, of(t0, ONE_N)));
		assertTrue(find(of(t3, EQUALS), GREATER, of(t0, GREATER)));
		assertTrue(find(of(t3, EQUALS), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t3, LESS), GREATER, of(t0, LESS_GREATER)));
		assertTrue(find(of(t3, LESS), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t3, GREATER), GREATER, of(t0, GREATER)));
		assertTrue(find(of(t3, GREATER), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t3, LESS_GREATER), GREATER, of(t0, LESS_GREATER)));
		assertTrue(find(of(t3, LESS_GREATER), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t3, CROSS), GREATER, of(t0, CROSS)));
		assertTrue(find(of(t3, CROSS), CROSS, of(t0, CROSS)));
		assertTrue(find(of(t3, ONE_ONE), EQUALS, of(t1, ONE_N)));
		assertTrue(find(of(t3, ONE_ONE), CROSS, of(t1, ONE_N)));
		assertTrue(find(of(t3, N_ONE), EQUALS, of(t1, N_ONE)));
		assertTrue(find(of(t3, N_ONE), CROSS, of(t1, N_ONE)));
		assertTrue(find(of(t3, ONE_N), EQUALS, of(t1, ONE_N)));
		assertTrue(find(of(t3, ONE_N), CROSS, of(t1, ONE_N)));
		assertTrue(find(of(t3, EQUALS), EQUALS, of(t1, EQUALS)));
		assertTrue(find(of(t3, EQUALS), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t3, LESS), EQUALS, of(t1, LESS)));
		assertTrue(find(of(t3, LESS), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t3, GREATER), EQUALS, of(t1, GREATER)));
		assertTrue(find(of(t3, GREATER), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t3, LESS_GREATER), EQUALS, of(t1, LESS_GREATER)));
		assertTrue(find(of(t3, LESS_GREATER), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t3, CROSS), EQUALS, of(t1, CROSS)));
		assertTrue(find(of(t3, CROSS), CROSS, of(t1, CROSS)));
		assertTrue(find(of(t3, ONE_ONE), GREATER, of(t2, ONE_N)));
		assertTrue(find(of(t3, ONE_ONE), CROSS, of(t2, ONE_N)));
		assertTrue(find(of(t3, N_ONE), GREATER, of(t2, N_ONE)));
		assertTrue(find(of(t3, N_ONE), CROSS, of(t2, N_ONE)));
		assertTrue(find(of(t3, ONE_N), GREATER, of(t2, ONE_N)));
		assertTrue(find(of(t3, ONE_N), CROSS, of(t2, ONE_N)));
		assertTrue(find(of(t3, EQUALS), GREATER, of(t2, GREATER)));
		assertTrue(find(of(t3, EQUALS), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t3, LESS), GREATER, of(t2, LESS_GREATER)));
		assertTrue(find(of(t3, LESS), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t3, GREATER), GREATER, of(t2, GREATER)));
		assertTrue(find(of(t3, GREATER), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t3, LESS_GREATER), GREATER, of(t2, LESS_GREATER)));
		assertTrue(find(of(t3, LESS_GREATER), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t3, CROSS), GREATER, of(t2, CROSS)));
		assertTrue(find(of(t3, CROSS), CROSS, of(t2, CROSS)));
		assertTrue(find(of(t3, ONE_ONE), EQUALS, of(t3, ONE_N)));
		assertTrue(find(of(t3, ONE_ONE), CROSS, of(t3, ONE_N)));
		assertTrue(find(of(t3, N_ONE), EQUALS, of(t3, N_ONE)));
		assertTrue(find(of(t3, N_ONE), CROSS, of(t3, N_ONE)));
		assertTrue(find(of(t3, ONE_N), EQUALS, of(t3, ONE_N)));
		assertTrue(find(of(t3, ONE_N), CROSS, of(t3, ONE_N)));
		assertTrue(find(of(t3, EQUALS), EQUALS, of(t3, EQUALS)));
		assertTrue(find(of(t3, EQUALS), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t3, LESS), EQUALS, of(t3, LESS)));
		assertTrue(find(of(t3, LESS), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t3, GREATER), EQUALS, of(t3, GREATER)));
		assertTrue(find(of(t3, GREATER), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t3, LESS_GREATER), EQUALS, of(t3, LESS_GREATER)));
		assertTrue(find(of(t3, LESS_GREATER), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t3, CROSS), EQUALS, of(t3, CROSS)));
		assertTrue(find(of(t3, CROSS), CROSS, of(t3, CROSS)));
		assertTrue(find(of(t3, ONE_ONE), N_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t3, N_ONE), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t3, ONE_N), N_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t3, EQUALS), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t3, LESS), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t3, GREATER), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t3, LESS_GREATER), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t3, CROSS), N_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t4, ONE_ONE), ONE_N, of(t0, ONE_N)));
		assertTrue(find(of(t4, N_ONE), ONE_N, of(t0, CROSS)));
		assertTrue(find(of(t4, ONE_N), ONE_N, of(t0, ONE_N)));
		assertTrue(find(of(t4, EQUALS), ONE_N, of(t0, ONE_N)));
		assertTrue(find(of(t4, LESS), ONE_N, of(t0, ONE_N)));
		assertTrue(find(of(t4, GREATER), ONE_N, of(t0, ONE_N)));
		assertTrue(find(of(t4, LESS_GREATER), ONE_N, of(t0, ONE_N)));
		assertTrue(find(of(t4, CROSS), ONE_N, of(t0, ONE_N)));
		assertTrue(find(of(t4, ONE_ONE), ONE_N, of(t1, ONE_N)));
		assertTrue(find(of(t4, N_ONE), ONE_N, of(t1, CROSS)));
		assertTrue(find(of(t4, ONE_N), ONE_N, of(t1, ONE_N)));
		assertTrue(find(of(t4, EQUALS), ONE_N, of(t1, ONE_N)));
		assertTrue(find(of(t4, LESS), ONE_N, of(t1, ONE_N)));
		assertTrue(find(of(t4, GREATER), ONE_N, of(t1, ONE_N)));
		assertTrue(find(of(t4, LESS_GREATER), ONE_N, of(t1, ONE_N)));
		assertTrue(find(of(t4, CROSS), ONE_N, of(t1, ONE_N)));
		assertTrue(find(of(t4, ONE_ONE), ONE_N, of(t2, ONE_N)));
		assertTrue(find(of(t4, N_ONE), ONE_N, of(t2, CROSS)));
		assertTrue(find(of(t4, ONE_N), ONE_N, of(t2, ONE_N)));
		assertTrue(find(of(t4, EQUALS), ONE_N, of(t2, ONE_N)));
		assertTrue(find(of(t4, LESS), ONE_N, of(t2, ONE_N)));
		assertTrue(find(of(t4, GREATER), ONE_N, of(t2, ONE_N)));
		assertTrue(find(of(t4, LESS_GREATER), ONE_N, of(t2, ONE_N)));
		assertTrue(find(of(t4, CROSS), ONE_N, of(t2, ONE_N)));
		assertTrue(find(of(t4, ONE_ONE), ONE_N, of(t3, ONE_N)));
		assertTrue(find(of(t4, N_ONE), ONE_N, of(t3, CROSS)));
		assertTrue(find(of(t4, ONE_N), ONE_N, of(t3, ONE_N)));
		assertTrue(find(of(t4, EQUALS), ONE_N, of(t3, ONE_N)));
		assertTrue(find(of(t4, LESS), ONE_N, of(t3, ONE_N)));
		assertTrue(find(of(t4, GREATER), ONE_N, of(t3, ONE_N)));
		assertTrue(find(of(t4, LESS_GREATER), ONE_N, of(t3, ONE_N)));
		assertTrue(find(of(t4, CROSS), ONE_N, of(t3, ONE_N)));
		assertTrue(find(of(t4, ONE_ONE), ONE_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t4, N_ONE), ONE_ONE, of(t4, N_ONE)));
		assertTrue(find(of(t4, ONE_N), ONE_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t4, EQUALS), ONE_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t4, LESS), ONE_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t4, GREATER), ONE_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t4, LESS_GREATER), ONE_ONE, of(t4, ONE_ONE)));
		assertTrue(find(of(t4, CROSS), ONE_ONE, of(t4, ONE_ONE)));

		//no extra edges
		assertEquals(0, gs.getEdgeCount());
	}
	
	private boolean find(SelectivityType source, SelectivityClass sym, SelectivityType target){
		GraphEdge<SelectivityType, SelectivityClass> edge = gs.getEdge(source, target, sym);
		if(edge != null){
			edge.remove();
			return true;
		}else{
			return false;
		}
	}
}
